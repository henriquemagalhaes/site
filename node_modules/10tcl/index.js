exports.attack = function(root, pathToConfig, port){

    // ======================================================
    // prepare attack
    require('sugar')
    Object.extend()

    var express      = require('express')
      , srv          = express()
      , consolidate  = require('consolidate')
      , staticModels = require('./lib/model/staticModels')()
    
    httpServer = require('http').Server( srv )
    log      = require('./lib/util/selectiveLog')
    bcrypt   = require('bcrypt-nodejs')
    fs       = require('fs')
    mustache = require('mustache')
    srv.s3   = require('./lib/util/amazonS3')
    srv.io   = require('socket.io')( httpServer )
    p30      = require('./lib/util/parallel30')
    config   = require(root + pathToConfig) 

    // ======================================================
    // configure server 
    var pathToViews   = (config.pathToViews) ? root+config.pathToViews : root+'/views'

    config.viewRoot    = __dirname+'/lib/view'
    config.publicRoot  = __dirname+'/lib/public'
    config.pathToViews = pathToViews
    
    srv.configure(function(){
        srv.engine( 'html', consolidate.ejs )
        srv.set( 'view engine', 'html' )
        srv.set( 'views',  pathToViews )

        srv.use(express.logger('tiny'))
        srv.use(express.bodyParser())
        srv.use(express.methodOverride())
        srv.use(express.static( root + '/public' ))
        srv.use(express.static( config.publicRoot ))

        srv.use(express.cookieParser())
        srv.use(express.session(config.session))
        srv.use(srv.router)
    })

    // ======================================================
    // db
    var mongo  = require('mongoskin')
    srv.db = mongo.db(config.db.connectionString, {safe: false})


    // ======================================================
    // controller
    var base        = require('./lib/ctrl/ctrlBase')(srv, config)
      , pathToCtrls = (config.pathToCtrls) ? root+config.pathToCtrls : root+'/controllers'
      , ctrls       = fs.readdirSync(pathToCtrls)
    
    menuItems   = []
    
    ctrls.forEach(function(file){
        if (file.endsWith('.js')){
            var controller_path = '{1}/{2}'.assign(pathToCtrls, file)
            menuItem = require(controller_path)(srv, base, config)
            if (menuItem) menuItems.push(menuItem)
        }
    })
    
    // ======================================================
    // model
    var pathToModels    = (config.pathToModels) ? root+config.pathToModels : root+'/models'
      , pathToValidator = (config.pathToValidator) ? root+config.pathToValidator : './lib/model/modelValidator'
      , models          = fs.readdirSync(pathToModels)
      , modelExt        = (process.argv.find('mock')) ? require('./lib/model/modelExtMock')(srv) : require('./lib/model/modelExt')(srv)
      , ctrlCrud        = require( './lib/ctrl/ctrlCrud' )
      , ctrlStatic      = require( './lib/ctrl/ctrlStatic' )
      , fieldExt        = require( './lib/model/fieldExt' )

    staticModels.each( function( key, value ){
        ctrlStatic(srv, base, key, config)
    })

    srv.m = staticModels
    
    function requireModel(modelPath){
        log('requiring model: '+modelPath)
        var model  = require(modelPath)
          , domain = (config.domain) ? '/{1}/'.assign(config.domain) : '/'

        model = srv.m[model.name] = model
        model.merge(modelExt, false, false)
        model.fields.forEach( function( field ){
            fieldExt( field )
        })
        
        if ( !model.avoidGenericController ){
            if (model.menu){
                var tenant = ''
                if ( model.multiTenant ) tenant = '{1}/'
                menuItems.push({menu: model.menu, url: domain + tenant + model.name, label: model.label, onlyFor: model.onlyFor})
            }
            ctrlCrud(srv, base, model, config)  
        }
    }

    if (config.multiTenant){
        requireModel( './lib/model/tenant.js' )
    }
    
    models.forEach(function(file){
        if (file.endsWith('.js') || file.endsWith('.json')){
            var modelPath = '{1}/{2}'.assign(pathToModels, file)
            requireModel(modelPath)
        }
    })


    // ======================================================
    // users
    var pathToUser    = (config.pathToUser) ? root+config.pathToUser+'/user'    : './lib/model/user'
    var pathToProfile = (config.pathToUser) ? root+config.pathToUser+'/profile' : './lib/model/profile'
    requireModel(pathToUser)
    //requireModel(pathToProfile)
    srv.m.user.cache = [config.admin]
    //srv.m.profile.cache = [config.admin]

    require('./lib/ctrl/ctrlProfile')(srv, base, config)

    httpServer.listen( port )
    console.log( 'listening to', port )
}