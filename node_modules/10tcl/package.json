{
  "name": "10tcl",
  "description": "CRUD over express and mongodb",
  "version": "0.0.12",
  "author": {
    "name": "Fernando Becker",
    "email": "fernandobbecker@gmail.com"
  },
  "dependencies": {
    "express": "3.2.x",
    "mongoskin": "0.5.x",
    "consolidate": "*",
    "ejs": "*",
    "mustache": "*",
    "sugar": "*",
    "bcrypt-nodejs": "*"
  },
  "keywords": [
    "10tcl",
    "tentacle",
    "crud"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/superpeixeboi/10tcl.git"
  },
  "main": "index",
  "engines": {
    "node": "*"
  },
  "readme": "## What is it?\n\n10tcl implements CRUD views in an express app reading/storing data in your mongodb.\n\n## How is it?\n\nNot terrible now.\nDropped some ridiculous ideas about cache. Going to implement decent cache next.\nRefactored and simplified a lot of things, considering move to 0.1 soon.\n\n## Install\n\n    $ npm install 10tcl\n\n## Config\n\nA config file must contain:\n    \n    module.exports = {\n        // used as title for your pages\n        brand: 'Day of the Tentacle IS HERE!',\n        // used to specify a subdomain other than the index\n        domain: 'admin',\n        // used to assemble the connection string to your mongodb instance\n        db: { \n            usr: 'Purple',\n            pwd: 'Tentacle',\n            srv: 'ds044356.mongolab.com:49842',\n            db:  'day_of_the_tentacle',\n            par: 'auto_reconnect'\n        },\n        // static admin user to allow first login\n        admin: { usr: 'admin', pwd: 'ElGranSecreto', name: 'Admin', role: 'admin'}\n        // __dirname of your root\n        root: root, \n        // if not informed it defaults to 'root/models', 'root/controllers' and 'root/views'\n        pathToCtrls: '/app/controllers',\n        pathToModels: '/app/models',\n        pathToViews: '/app/views',\n        pathToValidator: 'app/models/validator'\n    }\n    \n## Use\n\n    // __dirname will be the root to locate folders indicated in pathTo... properties\n    var app = require('10tcl').attack(__dirname, '/config/yourConfigFile')\n    app.listen(yourPortHere)\n\n10tcl attack results in an express app configured with routes based on your models and controllers.\n\n### Database\n\napp.db contains a connection to your database.\nIt was done by using Mongoskin and the credentials on the config object.\n\n### Controllers\n\nEvery .js file under your controllers folder was required, receiving (app, base, config).\n\nAn example of controller file would be:\n\n    module.exports = function(app, base, config){\n\n        function hello(req, res){\n            res.send('hello world')\n        }\n\n        app.get('/hello', base.auth, hello )\n\n        // will be used to create a menu\n        return {name: 'hello', label: 'Hello World', menu: 'config'}\n\n    }\n\n### Models\n\nEvery .js (and .json) file under your models folder was required as well, no arguments.\nEach binded to app.db by the model.name property, so now app.db[modelNameHere] points to a collection capable of restfull crud.\n\nAn example of model would be:\n\n    module.exports = {\n        // model and db collection name\n        name: 'victims',\n        // Title for pages and menu\n        label: 'Victims',\n        // used with mustache to format list and drop down descriptions \n        format: 'Victim {{name}} {{lastName}}',\n        // fields to format and forms (see next topic)\n        fields: [\n            { name: 'name', label: 'Nome', type: 'string', checks: ['hasValue'] },\n            { name: 'lastName', label: 'Sobrenome', type: 'string' }\n        ],\n        // create route '<your-site>.com/victims' pointing to 10tcl CRUD\n        routeTo10tcl: true,\n        // restrict access to users with one of these roles\n        onlyFor: ['admin'],\n        // used if you run 'node myApp.js mock'\n        mock: [\n            {name: 'Mussum', _id: '508e0077d42bd6182f000001'},\n            {name: 'Zacarias', _id: '508e0077d42bd6182f000002'},\n            {name: 'Dedé', lastname: 'Santana', _id: '508e0077d42bd6182f000003'},\n            {name: 'Didi', lastname: 'Mocó', _id: '508e0077d42bd6182f000004'}\n        ]\n    }\n\n### Field types\n\n10tcl understands: string, number, email, tel, date, html, text, reference (type: 'reference', to: 'criminal')\nEach will result in a different html element and layout.\nA field type different from the above will result in a regular input field.\n\n### Validation\n\n10tcl modelValidator provides type associated checks, that are automatically executed on POST/PUT transactions.\nOther than that, a field can contain a property checks: ['hasValue', ...]\nEach string in checks array will trigger the correspondent function of the modelValidator.\nDefining pathToValidator, you can implement your own validator that will be required instead of the 10tcl one.\n\n### Users\n\nUser and Profile are pre-loaded models that provide access control.\nThe config property \"admin\" provides a proto user for the first login.\n\n### i18n\n\nNop... sorry.\nAnd I'm outputting static texts in PT-BR.\nNot happy with any package I've tried.\nWant to keep texts in a cached db for online editing and translation.\n\n### CRUD\n\nThe views are made with EJS, bootstrap and jquery.\nMobile is out right now for refactoring.\n\n### Issues\n\n#### Broken AWS deploy\n\nAdding bcrypt caused AWS deploys to fail, your instance is missing the required openssl package.\nTo fix this, create a file .ebextensions/01_packages.config, with the following content:\n\n    packages:\n        yum:\n            openssl-devel: []\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/superpeixeboi/10tcl/issues"
  },
  "homepage": "https://github.com/superpeixeboi/10tcl",
  "_id": "10tcl@0.0.12",
  "dist": {
    "shasum": "681ca45ba22d0b9599e9471741c0475261d6bf59"
  },
  "_from": "https://github.com/superpeixeboi/10tcl/tarball/master",
  "_resolved": "https://github.com/superpeixeboi/10tcl/tarball/master"
}
