module.exports = function(srv, config){

    var baseURL = ''
      , rootDomain = config.domain ? '/'+config.domain : ''
      , tenantDomain = config.multiTenant ? '/:tenant' : ''
      , idxURL = ''
    
    baseURL = rootDomain + tenantDomain
    if (baseURL === '') idxURL = '/'
    else idxURL = baseURL

    var base = {
        auth: function(req, res, next){
            
            if ( req.header('user-agent').toLowerCase().has('mobile') ) req.isMobile = true
            if (req.session.user) {
                next()
            } else {
                var viewFile = (req.isMobile) ? '/login_mobile' : '/login'
                  , domain = ''

                if (config.domain) domain = '/'+config.domain
                if (req.params.tenant) domain = domain+'/'+req.params.tenant

                var viewData = {
                    path:req.path, 
                    brand:config.brand, 
                    domain: domain,
                    baseURL: domain, 
                    tenant: req.params.tenant,
                    user: null, 
                    partials: {
                        topbar: '../components/topbar'
                    }
                }
                res.render( config.viewRoot+viewFile, viewData )
            }
        },

        checkMob: function(req, res, next){
            if ( req.header('user-agent').toLowerCase().has('mobile') ) req.isMobile = true
            next()
        },

        checkTenant: function( req, res, next ){
            if ( !config.multiTenant || !req.params.tenant ){
                next()
            } else {
                if ( req.session.tenant ){
                    if ( req.session.tenant.key === req.params.tenant ){
                        next()
                    } else {
                        res.send(401)
                    }
                } else {

                    function afterFind( err, data ){

                        var exists = data.length > 0

                        if ( exists ){ 
                            req.session.tenant = data[0]
                            next() 
                        } else { 
                            res.send(404) 
                        } 
                    }
                    srv.m.tenant.getByQuery( { query: { key: req.params.tenant }, callback: afterFind } )
                }
            }
        },

        login: function(req, res){
            
            var tenant     = req.session.tenant ? req.session.tenant.key : undefined
              , credential = { usr: req.body.usr, pwd: req.body.pwd }

            function afterCheck( status, data ){
                if ( status === 200 ){
                    delete data.pwd
                    delete data._id

                    function buildMenu(usr, role){
                        var items = menuItems.filter(function(item){
                            if ( !item.onlyFor ) return true
                            if ( item.onlyFor.isString() ) return item.onlyFor === role || item.onlyFor === usr
                            if ( item.onlyFor.isArray() ) return item.onlyFor.some( role ) || item.onlyFor.some( usr )
                        })
                        itemGroups = items.groupBy( 'menu' )
                        var menu = []

                        itemGroups.each(function(key, val){
                            menu.push({name: key, items: val})
                        })
                        return menu
                    }

                    req.session.user = data
                    req.session.user.menu = buildMenu( data.usr, data.role )
                    res.redirect( req.body.path )
                } else {
                    res.send( status, data )
                }
            }

            srv.m.user.checkUser( tenant, credential, afterCheck )
        },

        logout: function(req, res){
            delete req.session.user
            res.redirect(baseURL)
        },

        idx: function(req, res){
            var user = req.session.user

            if (req.isMobile) {
                res.render(config.viewRoot+'/index_mobile', {brand: config.brand, user: user})
            } else {
                res.render(
                    config.viewRoot+'/index', 
                    {
                        brand: config.brand, 
                        baseURL: '/admin',
                        tenant: req.session.tenant ? req.session.tenant.key : undefined,
                        user: user
                    }
                )
            }
        },

        headerTest: function(req, res){
            res.send('<html><body><p>'+req.header('user-agent')+'</p></body></html>')
        },

        checkModel: function(req, res, next){

            var url = req.originalUrl.remove('/'+config.domain)
              , modelName = config.multiTenant ? url.split('/')[2] : url.split('/')[1]
              , model = srv.m[modelName]
              , tenant = req.session.tenant ? req.session.tenant.key : undefined

            req.params.model = modelName

            if ( model ) {
                if ( model.onlyFor ){
                    
                    function notForYou(){
                        var user = req.session.user 
                        if ( !user ) return true
                        if ( !user.role ) return true
                        return model.onlyFor.none(user.role)
                    }
                    if (notForYou()){
                        res.send(401)
                        return
                    }
                }

                next()
                
            } else {
                res.send(404)
            }
        }
    }

    srv.get ( idxURL            , base.checkTenant, base.auth, base.idx   )
    srv.post( baseURL+'/login'  , base.checkTenant, base.login            )
    srv.get ( baseURL+'/logout' , base.checkTenant, base.logout           )
    srv.post( '/admin/login'    , base.login                              )
    srv.get ( '/admin/logout'   , base.logout                             )

    return base
}