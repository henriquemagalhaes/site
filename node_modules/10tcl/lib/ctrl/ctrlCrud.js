module.exports = function(srv, base, model, config){

	var rootDomain = config.domain ? '/'+config.domain : ''
	  , tenantDomain = model.multiTenant ? '/:tenant' : ''
	  , modelDomain = '/' + model.name

	if ( config.multiTenant && !model.multiTenant ) rootDomain = '/admin'

	var baseURLTemplate = rootDomain + tenantDomain
	  , modelURLTemplate = rootDomain + tenantDomain + modelDomain

	var crud = {
		html: function(req, res, next) {

			var user       = req.session.user
			  , tenant     = (req.session.tenant) ? req.session.tenant.key : undefined
			  , model      = srv.m[req.params.model]
			  , baseURL    = baseURLTemplate.replace(':tenant', tenant)
			  , modelURL   = modelURLTemplate.replace(':tenant', tenant)
			  , fieldsets  = model.fieldsets()
			  , clientData = {
					name: model.name
				  , url: modelURL
				  , format: model.format
				  , fieldsets: fieldsets
				}
			  , viewParameters = { 
					baseURL: baseURL
				  , modelURL: modelURL
				  , tenant: tenant
				  , clientData: JSON.stringify(clientData)
				  , s3credentials: srv.s3.credentialize( config, tenant )
				  , brand: config.brand
				  , user: user
				  , label: model.label
				  , fieldsets: fieldsets
				}

			res.render( config.viewRoot+'/crud', viewParameters )
		},

		getList: function(req, res) {
			
			var model  = srv.m[req.params.model]
			  , desc   = (req.params.desc) ? req.params.desc.decodeBase64() : undefined
			  , tenant = (req.session.tenant) ? req.session.tenant.key : undefined
			
			function then(err, data){
				res.send(data)
			}

			model.options( { query: desc, callback: then, tenant: tenant } )
		},
		
		getTags: function(req, res) {
			
			var model  = srv.m[req.params.model]
			  , tenant = (req.session.tenant) ? req.session.tenant.key : undefined
			
			function then(err, data){
				var tags = {
					categoryName: model.label,
					tags: data.map( function(datum){ return { tagName: datum.desc } } )
				}
				res.send(tags)
			}

			model.options( { callback: then, tenant: tenant } )
		},

		getPage: function(req, res){
			
			var model   = srv.m[req.params.model]
			  , page    = req.params.page
			  , perPage = req.params.perPage
			  , tenant  = req.session.tenant ? req.session.tenant.key : undefined
			  , desc    = req.params.desc ? req.params.desc.unescapeURL() : undefined
			  , regex   = desc ? { $regex: desc, $options: 'i' } : undefined
			  , query   = desc ? { $or: [] } : undefined

			if ( desc ){
				model.formatFields().forEach( function( field ){
					if ( '_id' === field ) return

					var or = {}
					or[ field ] = regex
					query.$or.push( or )
				})
			}

			function then( err, result ){
				result.data = result.data.map(function(r){ return { _id: r._id, desc: model.desc(r) } } )
				res.send( result )
			}
			
			model.getByPage({
				page: page, 
				perPage: perPage, 
				callback: then, 
				tenant: tenant,
				query: query
			})
		},

		getById: function( req, res ){
			
			var model  = srv.m[req.params.model]
			  , id     = req.params.id
			  , tenant = (req.session.tenant) ? req.session.tenant.key : undefined

			function then( err, data ){
				res.send( data )
			}

			model.getById({
				id: id, 
				callback: then, 
				tenant: tenant
			})
		},

		create: function( req, res, next ){
			
			var model  = srv.m[req.params.model]
			  , data   = req.body
			  , tenant = (req.session.tenant) ? req.session.tenant.key : undefined
			  , who = { usr: req.session.user.usr, email: req.session.user.email, role: req.session.user.role }

			data.audit = { who: who, when: Date.create('now', 'pt-br') }

			function then( err, items ){
				(err) ? res.send(500, err) : res.json(items.first())
			}
			model.insert( data, then, tenant )
		},

		update: function( req, res, next ){
			
			var model  = srv.m[req.params.model]
			  , data   = req.body
			  , tenant = (req.session.tenant) ? req.session.tenant.key : undefined
			  , who = { usr: req.session.user.usr, email: req.session.user.email, role: req.session.user.role }

			data.audit = { who: who, when: Date.create('now', 'pt-br') }

			function then(err, items){
				(err) ? res.send(500, err) : res.json(req.body)
			}

			model.update( data, then, tenant )
		},

		remove: function( req, res, next ){
			
			var model  = srv.m[req.params.model]
			  , id     = req.params.id
			  , tenant = (req.session.tenant) ? req.session.tenant.key : undefined
			  , who    = { usr: req.session.user.usr, email: req.session.user.email, role: req.session.user.role }

			function then(err, items){
				err ? res.send(500, err) : res.send(200)
			}
			model.remove(id, who, then, tenant)
		},

		migrationForm: function(req, res){

			var model = srv.m[req.params.model]
			res.render( config.viewRoot+'/migration', {
				m: {
					name: model.name,
					label: model.label,
					fields: model.fields,
					msg: 'no harm done... yet',
					records: ''
				}
			})
		}, 

		migrationData: function(req, res){

			var model = srv.m[req.params.model]
			  , records = JSON.parse(req.body.records)
			function then(err, items){
				var msg = 'Success: '+items.length+' records included.'
				if (err) msg = err

				res.render( config.viewRoot+'/migration', {
					m: {
						name: model.name,
						label: model.label,
						fields: model.fields,
						msg: msg,
						records: req.body.records
					}
				})     
			}

			model.insert(records, then)
		}

	}

	log('adding CRUD controller routes to '+model.name+' at '+modelURLTemplate)

	srv.get   ( modelURLTemplate               , base.checkTenant, base.auth, base.checkModel, crud.html          )
	srv.get   ( modelURLTemplate+'/list'       , base.checkTenant, base.auth, base.checkModel, crud.getList       )
	srv.get   ( modelURLTemplate+'/list/:desc' , base.checkTenant, base.auth, base.checkModel, crud.getList       )
	srv.get   ( modelURLTemplate+'/list/:desc' , base.checkTenant, base.auth, base.checkModel, crud.getList       )
	srv.get   ( modelURLTemplate+'/tags'       , base.checkTenant, base.auth, base.checkModel, crud.getTags       )
	srv.get   ( modelURLTemplate+'/page/:page/:perPage' , base.checkTenant, base.auth, base.checkModel, crud.getPage       )
	srv.get   ( modelURLTemplate+'/page/:page/:perPage/:desc' , base.checkTenant, base.auth, base.checkModel, crud.getPage       )
	srv.get   ( modelURLTemplate+'/byId/:id'   , base.checkTenant, base.auth, base.checkModel, crud.getById       )
	srv.post  ( modelURLTemplate               , base.checkTenant, base.auth, base.checkModel, crud.create        )
	srv.put   ( modelURLTemplate               , base.checkTenant, base.auth, base.checkModel, crud.update        )
	srv.delete( modelURLTemplate+'/:id'        , base.checkTenant, base.auth, base.checkModel, crud.remove        )    
	srv.get   ( modelURLTemplate+'/migrate'    , base.checkTenant, base.auth, base.checkModel, crud.migrationForm )
	srv.post  ( modelURLTemplate+'/migrate'    , base.checkTenant, base.auth, base.checkModel, crud.migrationData )
}