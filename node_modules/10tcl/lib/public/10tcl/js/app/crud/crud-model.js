(function($){

	$.model.merge({

		record: {},

		save: function(cb){
			($.model.record._id) ? this.update($.model.record, cb) : this.insert($.model.record, cb)
		},

		insert: function(record, cb){
			function then(record){
				$.model.data.add({_id: record._id, desc: $.model.desc(record)})
				$.model.pages = $.model.data.inGroupsOf($.model.rowsPerPage)
				$.model.pages.each(function(a){ 
					var idx = 0
					a.remove(null)
					a.each(function(o){ o.idx = idx++ })
				})
				$.model.page = $.model.pages[$.model.pageNr]
				alertify.success('Registro incluido.')
				if (cb) cb()
			}
			this.talkToServer('POST', record, then)
		},
		
		update: function(record, cb){
			function then(record, txt, jqXHR){
				var item = $.model.data.find({_id: record._id})
				item.desc = $.model.desc(record)
				$.model.pages = $.model.data.inGroupsOf($.model.rowsPerPage)
				$.model.pages.each(function(a){ 
					var idx = 0
					a.remove(null)
					a.each(function(o){ o.idx = idx++ })
				})
				alertify.success('Registro alterado.')
				if (cb) cb()
			}
			this.talkToServer('PUT', record, then)
		},

		query: function(){
			var query, cb
			if (arguments[0] && arguments[0].isString()) query = arguments[0]
			if (arguments[0] && arguments[0].isFunction()) cb = arguments[0]
			if (arguments[1] && arguments[1].isFunction()) cb = arguments[1]

			var url = this.url + '/page/1/' + $.model.rowsPerPage
			if (query) url += '/' + query.escapeURL()

			function then(response, txt, jqXHR){
				$.model.merge(response)
				$.model.loadPages()
				$.view.loadPage()
				if (cb) cb()
			}
			this.talkToServer( 'GET', url, then )
		},

		orderPages: function( cb ){
			if ( !$.model.pages ) $.model.pages = []
			var startPage = $.model.pages.length + 1
			  , url = this.url + '/page/{1}/{2}'.assign( startPage, $.model.rowsPerPage )
			  , searchVal = $('#search-field').val() 

			if ( searchVal ) url += '/'+searchVal.escapeURL()

			function then(response, txt, jqXHR){
				if ( !$.model.data ) $.model.data = []
				$.model.data.add(response.data)
				$.model.pageCount = response.pageCount
				$.model.recordCount = response.recordCount
				$.model.loadPages()
				if ( cb ) cb()
			}
			this.talkToServer( 'GET', url, then )	
		},

		loadPages: function(){
			if ( !$.model.pages ) $.model.pages = []
			$.model.pages = $.model.data.inGroupsOf($.model.rowsPerPage)
			$.model.pages.each(function(a){ 
				var idx = 0
				a.remove(null)
				a.each(function(o){ o.idx = idx++ })
			})
		},

		getById: function(id, cb){
			var url = '{1}/byId/{2}'.assign(this.url, id)

			function then(record, txt, jqXHR){
				$.model.record = record
				$.view.writeToForm()
			}
			this.talkToServer( 'GET', url, then )
		},

		newRecord: function(){
			$.model.record = {}
		},

		remove: function( id ){
			var url = '{1}/{2}'.assign( this.url, id )

			function then( err ){
				if ( err && err !== 'OK'){
					alertify.error('Erro ao remover: '+err+'.')
				} else {
					$.model.data.remove( function( datum ){ return datum._id === id } )
					$.model.loadPages()
				}
			}
			this.talkToServer( 'DELETE', url, then )
		},

		talkToServer: function(method, par, success, error){

			var contentType = (method === 'GET') ? '' : 'application/json'
			  , url         = (par.isString()) ? par : this.url
			  , data        = (par.isObject()) ? JSON.stringify( par ) : undefined
			  , error       = error || this.errorHandler
			
			$.ajax({ 
				url: url, 
				type: method, 
				contentType: contentType,
				context: this,
				data: data,
				success: success,
				error: error
			})	
		
		},

		errorHandler: function(jqXHR, txt, err){
			var errs = JSON.parse(jqXHR.responseText)	

			errs.each(function(err){
				if ( err.isString() ) alertify.error( err )
				if ( err.isObject() ) {
					$('#ctrl-group-'+err.field).addClass('has-error')
					$('.error-holder[for='+err.field+']').append( err.messages.join(', ') )
					alertify.error('Verifique o campo '+err.field+'.')
				}
			})
		},

		setFieldValue: function(fieldsetName, fieldName, value){
			var fieldset = $.model.fieldsets.find({fieldsetName: fieldsetName})
			
			if ( fieldset.type === 'instance' ){

				if ( !$.model.record[fieldsetName] ) $.model.record[fieldsetName] = {}
				$.model.record[fieldsetName][fieldName] = value
			} else if ( fieldset.type === 'list' ){
				
				if ( !$.model.record[fieldsetName] ) {
					var listRecord = {}
					listRecord[fieldName] = value
					$.model.record[fieldsetName] = [listRecord]
					fieldset.editIdx = 0

				} else {
					$.model.record[fieldsetName][fieldset.editIdx][fieldName] = value
				}
				$.view.applySublistTemplate( fieldsetName )

			} else {

				$.model.record[fieldName] = value
			}
		},

		getFieldValue: function(fieldsetName, fieldName, record){
			var value
			  , fieldset = $.model.fieldsets.find({fieldsetName: fieldsetName})

			if (!record) record = $.model.record

			if ( fieldset.type === 'instance'){

				value = record[fieldsetName][fieldName]
			} else if ( fieldset.type === 'list' ) {

				if ( fieldset.editIdx ){
					value = record[fieldsetName][fieldset.editIdx][fieldName]
				} 
			} else {

				value = record[fieldName]
			}

			return value
		},

		desc: function(record){
			return Mustache.render(this.format, record).trim()
		}
	})

})(jQuery)