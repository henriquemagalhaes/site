(function($){
	
	$.view = {

		start: function(){
			
			this.adjustHeights()
			this.startTabPanes()
			this.startFields()
			this.startShortcuts()
			// this.newRecord()
			
			$.model.watch('pageNr', function(prop, oldVal, newVal){
				return newVal
			})

			$.model.orderPages( $.view.loadPage )
			$('#tabPanes li:first').addClass('active')
		},

		editLinkClick: function(id){
			var desc = $.model.data.find({_id: id}).desc
			$.model.getById(id)
			$('.list-row.well').removeClass('well')
			$('.list-row[data-id={1}]'.assign(id)).addClass('well')
			$('.error-holder').html('')
			$('.form-group').removeClass('has-error')
			$('#form-wrapper').show('fast')
		},

		addLinkClick: function(){
			$.model.newRecord()
			$.view.newRecord()
		},

		newRecord: function(){
			$.model.fieldsets.each(function( fieldset ){
				fieldset.newRecord()
			})
			$('.error-holder').html('')
			$('.form-group').removeClass('has-error')
		},

		searchFieldChange: function(){
			var value = $('#search-field').val()
			$.model.query(value)
		},

		saveBtnClick: function(){
			$.model.save(function(){
				$.view.buildList()
				$('.control-group').removeClass('error')
			})
		},

		prevPageClick: function(){
			if ( $.model.pageNr > 0 ){
				$.view.loadPage( $.model.pageNr - 1 )
			}
		},

		nextPageClick: function(){
			if ( $.model.pageNr < ($.model.pageCount - 1) ){
				$.view.loadPage( $.model.pageNr + 1 )

				if ($.model.pages.length < $.model.pageCount     // there are more pages 
				 && $.model.pages.length - $.model.pageNr === 3  // only have three pages left (pageNr starts in 0)
				) {
					$.model.orderPages()                         // order more pages
				}
			}
		},

		loadPage: function( pageNr ){
			if ( !pageNr ) pageNr = 0
			$.model.pageNr = pageNr
			$.model.page = $.model.pages[ pageNr ]
			$.view.buildList()
		},

		selectPrev: function(){
			var selected = $('.list-row.well').attr('data-idx').toNumber()
			if (selected === 0) return
			selected--
			$('.list-row.well').removeClass('well')
			$('.list-row[data-idx={1}]'.assign(selected)).addClass('well')
		},

		selectNext: function(){
			var rows = $('.list-row').length - 1
			  , selected = $('.list-row.well').attr('data-idx').toNumber()
			if (selected === rows) return
			selected++
			$('.list-row.well').removeClass('well')
			$('.list-row[data-idx={1}]'.assign(selected)).addClass('well')	
		},

		escKeyAction: function(){
			$.view.cancelBtnClick()
			$('#help-icon').popover('hide')
		},

		searchFocus: function(){ 
			$('#search-field').focus()
			return false
		},

		editSelected: function(){ 
			var id = $('.list-row.well').attr('data-id')
			$.model.getById(id)
			$('#form-wrapper').show('fast')
			return false
		},

		popShortcuts: function(){
			$('#help-icon').popover('toggle')
		},

		newSublistClick: function( listName ){
			var fieldset = $.model.fieldsets.find({fieldsetName: listName})
			fieldset.newListRecord()
		},

		saveSublistClick: function( listName ){
			var fieldset = $.model.fieldsets.find({fieldsetName: listName})
			fieldset.saveListRecord()
		},

		editSublistClick: function( listName, _id ){
			var fieldset = $.model.fieldsets.find({fieldsetName: listName})
			fieldset.editListRecord( _id )
		},

		removeLinkClick: function( _id ){
			$.model.remove( _id )
		},

		startShortcuts: function(){
			Mousetrap.bind( ['+', 'n'],     this.addLinkClick   )
			Mousetrap.bind( 'right',        this.nextPageClick  )
			Mousetrap.bind( 'left',         this.prevPageClick  )
			Mousetrap.bind( 'up',           this.selectPrev     )
			Mousetrap.bind( 'down',         this.selectNext     )
			Mousetrap.bind( 'esc',          this.escKeyAction   )
			Mousetrap.bind( 'f',            this.searchFocus    )
			Mousetrap.bind( ['e', 'enter'], this.editSelected   )
			Mousetrap.bind( '?',            this.popShortcuts   )

			$('#help-icon').click($.view.popShortcuts)
			var html = $('#shortcuts').html()
			$('#help-icon').popover({content: html, trigger: 'manual', placement: 'bottom'})
		},

		buildList: function(){
			var tpl = $('#list-tpl').html()
			  , list = Mustache.render( tpl, $.model )

			$('#list-place').html(list)
		},

		applyTemplates: function(){
			$('[data-tpl]').each(function(i, el){
				var tplId = '#' + $(el).attr('data-tpl')
				  , targetId = '#' + $(el).attr('id')
				  , data = $.model.data

				$(tplId)
				.mu(data)
				.stacheOver(targetId)

				$('.list-row').first().addClass('well')
			})
		},

		adjustHeights: function(){
			var windowH   = $(window).height()
			  , topH = 50
			  , rowH = 40
			  , listH = windowH - 140
			  , rowsPerPage = Math.floor(listH / rowH)

			$.model.rowsPerPage = rowsPerPage
			$('.tab-content').attr('style', 'height: {1}px;'.assign(windowH - topH - 68));
		}, 

		startTabPanes: function(){
			$('#tabPanes a:first').addClass('active');
			$('.tab-content div:first').addClass('active');
			
			$('#tabPanes a').click(function (e) {
				e.preventDefault();
				$(this).tab('show');
			})
		},

		writeToForm: function(){
			$.model.fieldsets.each(function(fieldset){
				fieldset.writeToForm()
			})
			$('#crud-form').show('fast')
		},

		startFields: function(){
			
			$('.json-editor').each(function(idx, el){
				var editor = ace.edit($(el).attr('name'));
				editor.setTheme("ace/theme/monokai");
				editor.getSession().setMode("ace/mode/javascript");
			})

			$('.image-field-img').hide()
			
		}
	}

})(jQuery)