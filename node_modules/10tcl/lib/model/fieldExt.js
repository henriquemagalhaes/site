module.exports = function( field ){

	var treatByType = {
		date: {
			treatFormData: function(value){ 
				if ( !value || value === "" ) return
				return Date.create(value, 'pt') 
			},
			treatStoreData: function(value){
				var date = Date.create(value)
				date.toString = function(){ return this.format('{dd}/{MM}/{yyyy}') } 
				return date
			}
		},
		password: {
			treatFormData: function(value){
				var salt = bcrypt.genSaltSync(10);
				var hash = bcrypt.hashSync( value , salt);
				return hash
			},
			treatStoreData: function(value){}
		},
		default: {
			treatFormData: function(value){ return value },
			treatStoreData: function(value){ return value }
		}
	}
	
	var checkByType = {
		email: function(field, record){
			if ( !record[field.name] ) return

			var value = record[field.name], err = []

			// if ( !validator.isEmail(value) ) err.push('formato de e-mail inválido')
			if ( value.length < 8 ) err.push('valor muito curto para um e-mail')
			if ( err.length > 0 ) throw( err ) 
		},
		// url: function(field, record){
		// 	var value = record[field.name], err = []

		// 	if ( !validator.isURL(value) ) err.push('formato de URL inválido')
		// 	if ( err.length > 0 ) throw( err ) 
		// },
		tel: function(field, record){
			if ( !record[field.name] ) return

			var value = record[field.name], err = []

			if ( value.length < 8 ) err.push('telefone inválido')
			if ( err.length > 0 ) throw( err ) 
		},
		number: function(field, record){
			if ( !record[field.name] ) return

			var value = new Number( record[field.name] ), err = []

			if ( !value.isNumber() ) err.push('numero inválido')
			if ( err.length > 0 ) throw( err ) 
		},
		date: function(field, record){
			if ( !record[field.name] ) return

			var value = record[field.name]
			  , dateValue = Date.create(value, 'pt-br')
			  , err = []
			
			if ( !dateValue.isValid() ) err.push('data inválida')
			if ( err.length > 0 ) throw( err ) 
		}
	}

	function hasValue(field, record){
		var value = record[field.name], err = []

		if ( !value ) err.push('valor obrigatório')
		if ( err.length > 0 ) throw( err ) 
	}

	if ( treatByType[ field.type ] ){
		field.merge( treatByType[ field.type ] )
	} else {
		field.merge( treatByType.default )
	}

	field.validators = []
    
    if ( checkByType[ field.type ] ) field.validators.push( checkByType[ field.type ] )
	if ( field.checks && field.checks.has('hasValue') ) field.validators.push( hasValue )

	field.check = function( record ){
		var self = this
		err = []
		this.validators.each( function( check ){
			try { check(self, record) }
			catch(e){ err.add( e ) }
		})
		return err
	}

	return field
}